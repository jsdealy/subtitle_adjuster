#!/usr/bin/perl
# a program to adjust subtitle timing in .srt files <== 12/23/24 19:50:42 # 
use File::Temp qw(tempfile tempdir);
use feature qw(say);
use feature qw(signatures);
no warnings qw(experimental::signatures);
use feature 'state';
use strict;
use warnings;

# variables <== 12/24/24 22:08:35 # 
my $minutes = undef;
my $seconds = undef;

# a function for handling time wraparound <== 12/24/24 22:08:30 # 
sub check_for_wraparound_pass_ref ($n_ref) {
    if ($$n_ref < 0) {
	$$n_ref = 60 + $$n_ref;
	return -1;
    }
    elsif ($$n_ref > 59) {
	$$n_ref = $$n_ref - 60;
	return 1;
    }
    return 0;
}

# processing cli flags <== 12/24/24 22:08:12 # 
while (($_ = shift @ARGV) =~ m|^--?[a-zA-Z]+|) {
    if (m/^-h$/ || m/^--help$/i) {
	say qq|USAGE:\t[FLAGS [-msh]] [+-OFFSET_IN_SECS] SUBTITLEFILE|;
	say "\t-s (--seconds)\tSet the seconds offset (+-). (Use if also setting minutes.)";
	say "\t-m (--minutes)\tSet the minutes offset (+-).";
	say "NOTE: No need to use flags if the offset is in seconds.";
	exit 0;
    }
    elsif (m/^-m$/ || m/^--minutes?(=(\d+))?$/i) {
	if (defined $2) { $minutes = $2; }
	else { $minutes = shift @ARGV; }
	die "Missing or bad minutes\n\t" if not defined($minutes) or $minutes !~ m/^[+-]?[1-9]\d*$/
    }
    elsif (m/^-s$/ || m/^--seconds?(=(\d+))?$/i) {
	if (defined $2) { $seconds = $2; }
	else { $seconds = shift @ARGV; }
	die "Missing or bad seconds\n\t" if not defined($seconds) or $seconds !~ m/^[+-]?[1-9]\d*$/
    }
    else {
	die "Error: unknown option `$_`\n\t";
    }
}

if (not defined $minutes and not defined $seconds) {
    die "Error: no or bad offset\n\t" if not defined $_ or $_ !~ m|^[+-]?\d+$|;
    $seconds = $_;
}
else {
    unshift @ARGV, $_;
}

# limiting cli input to reasonable size <== 12/24/24 22:09:02 # 
die "Error: 60+ seconds. Use minutes...\n\t" if (defined $seconds and abs($seconds) > 59);
die "Error: 60+ minutes. Wtf...\n\t" if (defined $minutes and abs($minutes) > 59);

# getting a tempfile <== 12/24/24 22:07:38 # 
my ($temp_fh) = tempfile();

# eliminating pesky carriage returns in source so as not to muck paragraph mode <== 12/24/24 22:06:57 # 
while (<>) {
    s/\r//g;
    print $temp_fh $_;
}

# we will read from the temp file we just wrote to <== 12/24/24 22:07:23 # 
seek $temp_fh, 0, 0;

# paragraph mode <== 12/24/24 22:07:27 # 
$/ = "";

# main <== 12/24/24 22:08:00 # 
while($_ = <$temp_fh>) {
    if (defined and m[^(\d\d):(\d\d):(\d\d),\d*\s+-->\s+(\d{2}):(\d{2}):(\d{2}),\d*\s*$]m) {
	next if (m/anoxmous/i || m[(https?:(//)?)?(www.)\S+.(com|org|net)]i);
	my $first_h = $1;
	my $first_m = $2;
	my $first_s = $3;
	my $second_h = $4;
	my $second_m = $5;
	my $second_s = $6;

	$first_m += $minutes if defined $minutes;
	$second_m += $minutes if defined $minutes;
	$first_s += $seconds if defined $seconds;
	$second_s += $seconds if defined $seconds;

	$first_m += &check_for_wraparound_pass_ref(\$first_s);
	$second_m += &check_for_wraparound_pass_ref(\$second_s);
	$first_h += &check_for_wraparound_pass_ref(\$first_m);
	$second_h += &check_for_wraparound_pass_ref(\$second_m);

	$_ =~ s|^\d\d:\d\d:\d\d(,\d*\s+-->\s+)\d{2}:\d{2}:\d{2}(,\d*\s*)$|$first_h:$first_m:$first_s$1$second_h:$second_m:$second_s$2|m;
	$_ =~ s|:(\d)(?=[:,])|:0$1|g;
	$_ =~ s|^(\d):|0$1:|;
	print;
    }
    else {
	print;
    }
}

